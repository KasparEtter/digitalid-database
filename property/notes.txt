PersistentWritableNonNullableProperty requires
- a key object with a corresponding converter
- a name to be used as the database table name
- a site to use as the database schema name (the table should also be registered there to be creatable and exportable)
- a converter for the value
- a table (object?) to store the values (and allow creation and export?)
- a value validator like every property


ClientStorage -> Storage, ClientTable -> Table (has a dependency on the site type); also Module (as inner vertex of storage tree)? Make storage registerable at the site?
HostStorage -> ExportableStorage, HostTable -> ExportableTable (has a dependency on the block class)
SiteStorage -> SynchronizableStorage/SynchronizedStorage, SiteTable -> SynchronizableTable/SynchronizedTable (has dependencies on entity, permissions, restrictions and agent)

ValueCollector -> [Value]Collector or [Conversion]Collector
SelectionResult -> [Value]Distributor or [Conversion]Distributor


database-storage with:
- Site with register(Storage)
- Storage with create/deleteTables(Site), @Nonnull @CodeIdentifier String getName(), @Nullable Module getModule()
- Table implements Storage
- Module implements Storage with @Nonnull Set<@Nonnull Storage> get[Sub]Storages()

database-property with (per kind of property):
- PersistentWritableProperty with getKey/getObject(), getTime(), reset(), getPropertyInfo() and direct storing on set(value) (and getValueValidator() returning the validator in the info object?)
- PropertyInfo with getName(), getKey/ObjectConverter(), getValueConverter(), getValueValidator(), getPropertyTable() (and getDefaultValue() in case of NonNullableProperty)
- PropertyTable with getPropertyInfo(), load[ValueAndTime](), replace(oldValue, newValue) [depending on the kind of property]
- @GenerateProperty that generates the PropertyInfo object.

Also have an ObjectInfo with @Generate[Object]Info to have/generate a module, to which the tables of the properties (of that object) belong? If yes, introduce an "ObjectWithProperties" class?
Such a module would register itself in the site class (with static methods)â€¦? What about modules/tables that should only exist on either hosts or clients?
